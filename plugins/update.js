const { exec } = require('child_process');
const fs = require('fs').promises;

module.exports = {
    name: 'update',
    description: 'Actualiza el bot (Solo Owner)',
    usage: '.update',
    category: 'Owner',
    ownerOnly: true,
    
    async execute(client, message, args, settings) {
        // Verificar si el usuario es el owner
        if (message.from !== settings.owner + '@c.us') {
            return await message.reply('‚ùå Este comando solo est√° disponible para el propietario del bot.');
        }
        
        await message.reply('üîÑ *INICIANDO ACTUALIZACI√ìN*\n\nEsto puede tomar unos momentos...');
        
        try {
            // 1. Verificar git (si est√° disponible)
            await message.reply('üì° Verificando repositorio...');
            
            // 2. Actualizar dependencias
            await message.reply('üì¶ Actualizando dependencias...');
            
            await this.executeCommand('npm update');
            
            // 3. Limpiar cach√©
            await message.reply('üóëÔ∏è Limpiando cach√©...');
            
            delete require.cache;
            
            // 4. Verificar archivos de configuraci√≥n
            await message.reply('‚öôÔ∏è Verificando configuraci√≥n...');
            
            const configStatus = await this.verifyConfig();
            
            // 5. Recargar plugins
            await message.reply('üîå Recargando plugins...');
            
            const pluginCount = await this.reloadPlugins();
            
            // 6. Actualizar informaci√≥n del bot
            const newVersion = await this.updateBotInfo();
            
            const updateReport = `
‚úÖ *ACTUALIZACI√ìN COMPLETADA*

‚îå‚îÄ„Äå üìä RESUMEN „Äç
‚îú *Estado:* Exitoso
‚îú *Versi√≥n:* ${newVersion}
‚îú *Plugins:* ${pluginCount} recargados
‚îú *Configuraci√≥n:* ${configStatus ? '‚úÖ' : '‚ö†Ô∏è'}
‚îî *Tiempo:* ${new Date().toLocaleString('es-MX')}

‚îå‚îÄ„Äå üîÑ CAMBIOS „Äç
‚îú ‚úÖ Dependencias actualizadas
‚îú ‚úÖ Cach√© limpiado
‚îú ‚úÖ Plugins recargados
‚îú ‚úÖ Configuraci√≥n verificada
‚îî ‚úÖ Sistema optimizado

‚îå‚îÄ„Äå ‚ö†Ô∏è NOTA „Äç
‚îî El bot seguir√° funcionando normalmente

ü§ñ *Bot actualizado y listo para usar!*`;

            await message.reply(updateReport);
            
            // Log del update
            console.log(`Bot actualizado por: ${message.from} a las ${new Date().toISOString()}`);
            
        } catch (error) {
            console.error('Error durante actualizaci√≥n:', error);
            
            const errorReport = `
‚ùå *ERROR EN ACTUALIZACI√ìN*

üîç *Detalles:*
${error.message}

‚ö†Ô∏è *Recomendaciones:*
‚Ä¢ Verificar conexi√≥n a internet
‚Ä¢ Revisar permisos del sistema
‚Ä¢ Intentar restart manual si es necesario

üÜò Si el problema persiste, contacta soporte t√©cnico.`;

            await message.reply(errorReport);
        }
    },
    
    async executeCommand(command) {
        return new Promise((resolve, reject) => {
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    console.log(`Error: ${error.message}`);
                    resolve({ success: false, error: error.message });
                } else {
                    resolve({ success: true, output: stdout });
                }
            });
        });
    },
    
    async verifyConfig() {
        try {
            // Verificar que existan archivos cr√≠ticos
            const criticalFiles = ['settings.json', 'package.json', 'index.js'];
            
            for (const file of criticalFiles) {
                await fs.access(file);
            }
            
            return true;
        } catch (error) {
            console.error('Error verificando configuraci√≥n:', error);
            return false;
        }
    },
    
    async reloadPlugins() {
        try {
            const pluginFiles = await fs.readdir('./plugins');
            let count = 0;
            
            for (const file of pluginFiles) {
                if (file.endsWith('.js')) {
                    // Limpiar cach√© del plugin
                    const pluginPath = require.resolve(`../plugins/${file}`);
                    delete require.cache[pluginPath];
                    count++;
                }
            }
            
            return count;
        } catch (error) {
            console.error('Error recargando plugins:', error);
            return 0;
        }
    },
    
    async updateBotInfo() {
        try {
            // Leer package.json para obtener versi√≥n
            const packageData = await fs.readFile('./package.json', 'utf8');
            const packageInfo = JSON.parse(packageData);
            
            // Actualizar settings con nueva fecha
            const settingsData = await fs.readFile('./settings.json', 'utf8');
            const settings = JSON.parse(settingsData);
            
            settings.lastUpdate = new Date().toISOString();
            
            await fs.writeFile('./settings.json', JSON.stringify(settings, null, 2));
            
            return packageInfo.version || '1.0.0';
        } catch (error) {
            console.error('Error actualizando info del bot:', error);
            return '1.0.0';
        }
    }
};
